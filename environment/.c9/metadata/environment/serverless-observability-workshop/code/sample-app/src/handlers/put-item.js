{"filter":false,"title":"put-item.js","tooltip":"/serverless-observability-workshop/code/sample-app/src/handlers/put-item.js","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["const AWS = require('aws-sdk')","const docClient = new AWS.DynamoDB.DocumentClient()",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":3,"column":54},"action":"insert","lines":["const AWS = require('aws-sdk')","const docClient = new AWS.DynamoDB.DocumentClient()","const { MetricUnit } = require('../lib/helper/models')","const { putMetric } = require('../lib/logging/logger')"]}],[{"start":{"row":3,"column":54},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["let _cold_start = true",""],"id":4}],[{"start":{"row":6,"column":26},"end":{"row":22,"column":6},"action":"remove","lines":["sync (event, context) => {","    let response","    try {","        if (event.httpMethod !== 'POST') {","            throw new Error(`PutItem only accept POST method, you tried: ${event.httpMethod}`)","        }","","        const item = await putItem(event)","","        response = {","            statusCode: 200,","            headers: {","                'Access-Control-Allow-Origin': '*'","            },","            body: JSON.stringify(item)","        }","    } "],"id":5},{"start":{"row":6,"column":26},"end":{"row":13,"column":9},"action":"insert","lines":["async (event, context) => {","    let response","    try {","        if (_cold_start) {","            //Metrics","            await putMetric(name = 'ColdStart', unit = MetricUnit.Count, value = 1, { service: 'item_service', function_name: context.functionName })","            _cold_start = false","        }"]}],[{"start":{"row":6,"column":26},"end":{"row":6,"column":27},"action":"remove","lines":["a"],"id":6}],[{"start":{"row":6,"column":0},"end":{"row":23,"column":1},"action":"remove","lines":["exports.putItemHandler = async (event, context) => {","    let response","    try {","        if (_cold_start) {","            //Metrics","            await putMetric(name = 'ColdStart', unit = MetricUnit.Count, value = 1, { service: 'item_service', function_name: context.functionName })","            _cold_start = false","        }catch (err) {","        response = {","            statusCode: 500,","            headers: {","                'Access-Control-Allow-Origin': '*'","            },","            body: JSON.stringify(err)","        }","    }","    return response","}"],"id":7},{"start":{"row":6,"column":0},"end":{"row":42,"column":0},"action":"insert","lines":["  exports.putItemHandler = async (event, context) => {","    let response","    try {","        if (_cold_start) {","            //Metrics","            await putMetric(name = 'ColdStart', unit = MetricUnit.Count, value = 1, { service: 'item_service', function_name: context.functionName })","            _cold_start = false","        }","        if (event.httpMethod !== 'POST') {","            await putMetric(name = 'UnsupportedHTTPMethod', unit = MetricUnit.Count, value = 1, { service: 'item_service', operation: 'put-item' })","            throw new Error(`PutItem only accept POST method, you tried: ${event.httpMethod}`)","        }","","        const item = await putItem(event)","        response = {","            statusCode: 200,","            headers: {","                'Access-Control-Allow-Origin': '*'","            },","          body: JSON.stringify(item)","        }","        //Metrics","        await putMetric(name = 'SuccessfulPutItem', unit = MetricUnit.Count, value = 1, { service: 'item_service', operation: 'put-item' })","    } catch (err) {","        response = {","            statusCode: 500,","            headers: {","              'Access-Control-Allow-Origin': '*'","          },","          body: JSON.stringify(err)","        }","        //Metrics","        await putMetric(name = 'FailedPutItem', unit = MetricUnit.Count, value = 1, { service: 'item_service', operation: 'put-item' })","    }","    return response","}",""]}]]},"ace":{"folds":[],"scrolltop":13,"scrollleft":0,"selection":{"start":{"row":16,"column":45},"end":{"row":16,"column":45},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1647425901108,"hash":"1a0ea23b37a7efe04c5076e1513aaae03abfd99f"}